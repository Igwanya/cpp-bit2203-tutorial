name: Build on Linux

env:
  VCINSTALLDIR: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/
  Qt5_DIR: Qt\5.13.1\msvc2017_64\lib\cmake\Qt5\
  QTDIR: Qt\5.13.1\msvc2017_64\

windows:
  tags:
  - Windows
  stage: build
  script:
    - New-Item -ItemType "directory" -Confirm:$false -Force:$true -Name "build"
    - cd build
    - cmd.exe "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
    - cmake -G "Visual Studio 16 2019" -A x64 -T host=x64 -DQt5_DIR="C:/Qt/msvc" -DCMAKE_INSTALL_PREFIX="C:/opt/x64" -B. -DBUILD_TESTING=OFF ..
    - cmake --build . --config Release
    - Get-Location
    - ctest -C Release --output-on-failure

jobs:
  windows:
    timeout-minutes: 15
    runs-on: windows-2019

    steps:

    - name: Checkout
      uses: actions/checkout@v1

    - name: Prepare
      working-directory: build
      shell: cmd
      run: |
        curl -vLo qt-unified-windows-x86-online.exe http://download.qt.io/official_releases/online_installers/qt-unified-windows-x86-online.exe
        qt-unified-windows-x86-online.exe --verbose --script ..\ci\qt.qs
    - name: Configure
      working-directory: build
      shell: cmd
      run: cmake -DCPACK_IFW_ROOT=Qt/Tools/QtInstallerFramework/3.1 -DCMAKE_BUILD_TYPE=Release -G"Visual Studio 16 2019" ..

    - name: Compile
      working-directory: build
      shell: cmd
      run: cmake --build . --config Release -j 4

    - name: Package
      working-directory: build
      shell: cmd
      run: cmake --build . --config Release --target package

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: build/gh-greets-qt_installer.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

language: cpp

compiler:
- clang
- gcc

os:
- linux
- osx

env:
  global:
    - BOOST_VERSION="1.59.0"
    - BOOST_ROOT="${TRAVIS_BUILD_DIR}/vendor/boost"
    - QT_ROOT="${TRAVIS_BUILD_DIR}/vendor/qt5"

script:
- if [ "${TRAVIS_OS_NAME}" == "linux" ] && [ "${CC}" == "clang" ]; then export CC="clang-3.6" ; export CXX="clang++-3.6" ; echo "Rexported clang" ; fi
- |
  echo "Configuration info:"
  echo "BOOST_ROOT=${BOOST_ROOT}"
  cmake --version
  $CC --version
  $CXX --version
  qmake --version

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: Build On Ubuntu
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    -  name: Install dependency
        run: |
          sudo apt-get install cmake build-essential dpkg-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBOOST_ROOT:path="${BOOST_ROOT}" -DCMAKE_PREFIX_PATH:path="${CMAKE_PREFIX_PATH}:${QT_ROOT}"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
